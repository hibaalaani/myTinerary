{"ast":null,"code":"var _jsxFileName = \"D:\\\\mernProject2\\\\myTinerary\\\\client\\\\src\\\\Component\\\\AddCity.js\";\nimport React, { Component } from \"react\";\nimport { fetchCitiesAction, fetchAddCity } from \"../store/actions/cityActions\";\nimport { connect } from \"react-redux\";\n\nclass AddCity extends Component {\n  constructor() {\n    super();\n\n    this.handelChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.handelSubmit = e => {\n      e.preventDefault();\n      console.log(e);\n      const newCity = {\n        name: this.state.name,\n        country: this.state.country,\n        picture: this.state.picture\n      }; // retrieve token from local storage and send it to the add city action0DEFFF\n      //where to write condition for user login?\n\n      var token = localStorage.getItem(\"token\");\n      this.props.fetchAddCity(newCity, token);\n      console.log(\"submit\", this.state);\n    };\n\n    this.state = {\n      name: null,\n      country: null,\n      picture: null\n    };\n  }\n\n  componentDidMount() {\n    const city = this.props.cities;\n    this.props.fetchCitiesAction(city);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container-fluied mt-2 App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handelSubmit,\n      className: \"justify-content-center align-items-center  App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"mx-2\",\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \" \", \"Name:\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name\",\n      onChange: this.handelChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"mx-2\",\n      htmlFor: \"country\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \" \", \"Country\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"country\",\n      onChange: this.handelChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"mx-2\",\n      htmlFor: \"picture\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Picture:\"), React.createElement(\"input\", {\n      type: \"url\",\n      id: \"picture\",\n      onChange: this.handelChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"mx-2\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Add New City\")));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    cities: state.cities.cities,\n    user: state.users\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchAddCity: (city, token) => dispatch(fetchAddCity(city, token)),\n  fetchCitiesAction: city => dispatch(fetchCitiesAction(city))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCity);","map":{"version":3,"sources":["D:/mernProject2/myTinerary/client/src/Component/AddCity.js"],"names":["React","Component","fetchCitiesAction","fetchAddCity","connect","AddCity","constructor","handelChange","e","setState","target","id","value","handelSubmit","preventDefault","console","log","newCity","name","state","country","picture","token","localStorage","getItem","props","componentDidMount","city","cities","render","mapStateToProps","ownProps","user","users","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { fetchCitiesAction, fetchAddCity } from \"../store/actions/cityActions\";\nimport { connect } from \"react-redux\";\n\nclass AddCity extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: null,\n      country: null,\n      picture: null,\n    };\n  }\n\n  componentDidMount() {\n    const city = this.props.cities;\n    this.props.fetchCitiesAction(city);\n  }\n\n  handelChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n  handelSubmit = (e) => {\n    e.preventDefault();\n    console.log(e);\n    const newCity = {\n      name: this.state.name,\n      country: this.state.country,\n      picture: this.state.picture,\n    };\n    // retrieve token from local storage and send it to the add city action0DEFFF\n    //where to write condition for user login?\n    var token = localStorage.getItem(\"token\");\n    this.props.fetchAddCity(newCity, token);\n\n    console.log(\"submit\", this.state);\n  };\n  render() {\n    return (\n      <div className=\"container-fluied mt-2 App-header\">\n        <form\n          onSubmit={this.handelSubmit}\n          className=\"justify-content-center align-items-center  App-header\"\n        >\n          <label className=\"mx-2\" htmlFor=\"name\">\n            {\" \"}\n            Name:\n          </label>\n          <input type=\"text\" id=\"name\" onChange={this.handelChange} />\n          <label className=\"mx-2\" htmlFor=\"country\">\n            {\" \"}\n            Country\n          </label>\n          <input type=\"text\" id=\"country\" onChange={this.handelChange} />\n          <label className=\"mx-2\" htmlFor=\"picture\">\n            Picture:\n          </label>\n          <input type=\"url\" id=\"picture\" onChange={this.handelChange} />\n          <button className=\"mx-2\" type=\"submit\">\n            Add New City\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    cities: state.cities.cities,\n    user: state.users,\n  };\n};\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAddCity: (city, token) => dispatch(fetchAddCity(city, token)),\n  fetchCitiesAction: (city) => dispatch(fetchCitiesAction(city)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCity);\n"]},"metadata":{},"sourceType":"module"}