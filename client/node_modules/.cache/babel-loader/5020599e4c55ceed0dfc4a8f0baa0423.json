{"ast":null,"code":"var _jsxFileName = \"D:\\\\mernProject2\\\\myTinerary\\\\client\\\\src\\\\Component\\\\Itinerary.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { fetchItinerariesByCityName } from \"../store/actions/itineraryActions\";\n\nclass Itinerary extends Component {\n  constructor() {\n    super();\n\n    this.handelChange = e => {\n      console.log(e); // this.setState({\n      ///change the button color\n      /////post the favourite to the user\n\n      const newFavourite = this.body.params.name;\n      axios.post(\"http://localhost:5000/api/users/favourite\", newFavourite).then(res => {\n        console.log(\"response\", res);\n\n        if (res.status === 200) {\n          //send the user to his account page\n          window.location = \"/\";\n        }\n\n        this.setState({\n          users: [...this.state, newFavourite]\n        });\n      }).catch(error => {\n        console.log(\"error\" + error.response);\n\n        if (error.response) {\n          if (error.response.status === 409) {\n            alert(\"This email is already in use\");\n          } else {//alert with something else\n          }\n        }\n      }); // });\n    };\n\n    this.state = {\n      itineraries: [],\n      favourite: \"\"\n    };\n  }\n\n  componentDidMount() {\n    const city = this.props.match.params.city;\n    this.props.fetchItinerariesByCityName(city);\n  }\n\n  filter() {\n    if (this.props.itineraries) {\n      const filterItinerary = this.props.itineraries.filter((itinerary, index) => {\n        return itinerary.profile;\n      });\n      return filterItinerary;\n    } else {\n      return [];\n    }\n  }\n\n  render() {\n    const filterList = this.filter(); // const { itineraries } = this.props;\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Our Itineraries\"), filterList && filterList.map((itinerary, index) => React.createElement(\"div\", {\n      className: \"container  itinerary\",\n      key: index,\n      itinerary: itinerary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"card-title pt-3 text-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Activities in \", itinerary.name, \" : \", itinerary.activities), React.createElement(\"img\", {\n      className: \"card-body  align-center\",\n      src: itinerary.profile,\n      alt: itinerary.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text-light pb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"The Price for \", itinerary.duration, \" With Hotels\", \" \", itinerary.price)))), React.createElement(\"button\", {\n      btn: true,\n      \"btn-primary\": true,\n      onChange: this.handelChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Add To Your Favourite\", \" \"));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  console.log(\"mamToState\", state);\n  return {\n    itineraries: state.itineraries.itineraries\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchItinerariesByCityName: city => dispatch(fetchItinerariesByCityName(city))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Itinerary);","map":{"version":3,"sources":["D:/mernProject2/myTinerary/client/src/Component/Itinerary.js"],"names":["React","Component","connect","axios","fetchItinerariesByCityName","Itinerary","constructor","handelChange","e","console","log","newFavourite","body","params","name","post","then","res","status","window","location","setState","users","state","catch","error","response","alert","itineraries","favourite","componentDidMount","city","props","match","filter","filterItinerary","itinerary","index","profile","render","filterList","map","activities","duration","price","mapStateToProps","ownProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { fetchItinerariesByCityName } from \"../store/actions/itineraryActions\";\nclass Itinerary extends Component {\n  constructor() {\n    super();\n    this.state = {\n      itineraries: [],\n      favourite: \"\"\n    };\n  }\n  componentDidMount() {\n    const city = this.props.match.params.city;\n\n    this.props.fetchItinerariesByCityName(city);\n  }\n  handelChange = e => {\n    console.log(e);\n    // this.setState({\n    ///change the button color\n    /////post the favourite to the user\n    const newFavourite = this.body.params.name;\n    axios\n      .post(\"http://localhost:5000/api/users/favourite\", newFavourite)\n      .then(res => {\n        console.log(\"response\", res);\n        if (res.status === 200) {\n          //send the user to his account page\n          window.location = \"/\";\n        }\n        this.setState({\n          users: [...this.state, newFavourite]\n        });\n      })\n      .catch(error => {\n        console.log(\"error\" + error.response);\n        if (error.response) {\n          if (error.response.status === 409) {\n            alert(\"This email is already in use\");\n          } else {\n            //alert with something else\n          }\n        }\n      });\n    // });\n  };\n  filter() {\n    if (this.props.itineraries) {\n      const filterItinerary = this.props.itineraries.filter(\n        (itinerary, index) => {\n          return itinerary.profile;\n        }\n      );\n      return filterItinerary;\n    } else {\n      return [];\n    }\n  }\n  render() {\n    const filterList = this.filter();\n    // const { itineraries } = this.props;\n    return (\n      <div>\n        <h1>Our Itineraries</h1>\n        {filterList &&\n          filterList.map((itinerary, index) => (\n            <div\n              className=\"container  itinerary\"\n              key={index}\n              itinerary={itinerary}\n            >\n              {/* <div> */}\n              <h3 className=\"card-title pt-3 text-light\">\n                Activities in {itinerary.name} : {itinerary.activities}\n              </h3>\n              <img\n                className=\"card-body  align-center\"\n                src={itinerary.profile}\n                alt={itinerary.name}\n              />\n              <div className=\"text-light pb-3\">\n                <h4>\n                  The Price for {itinerary.duration} With Hotels{\" \"}\n                  {itinerary.price}\n                </h4>\n              </div>\n            </div>\n          ))}\n        <button btn btn-primary onChange={this.handelChange}>\n          Add To Your Favourite{\" \"}\n        </button>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  console.log(\"mamToState\", state);\n\n  return {\n    itineraries: state.itineraries.itineraries\n  };\n};\nconst mapDispatchToProps = dispatch => ({\n  fetchItinerariesByCityName: city => dispatch(fetchItinerariesByCityName(city))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Itinerary);\n"]},"metadata":{},"sourceType":"module"}