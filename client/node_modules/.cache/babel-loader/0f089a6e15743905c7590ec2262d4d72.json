{"ast":null,"code":"// I cleaned a bit your action, I was almost good, just a few probem with the .json() convertion and handeling the payload\n//it shuld work now ;)\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\"; // import dependency\n\nexport const fitchItinerariesAction = () => {\n  return dispatch => {\n    //add the full url of your back end\n    fetch(\"http://localhost:5000/api/itineraries\").then(resp => {\n      return resp.json();\n    }).then(json => {\n      dispatch({\n        type: \"FETCH_ITINERARIES_SUCCESS\",\n        payload: json\n      });\n    }).catch(err => {\n      dispatch({\n        type: \"FETCH_ITINERARIES_ERROR\",\n        payload: err\n      });\n    });\n  };\n};\nexport const fetchItinerariesByCityName = city => {\n  return dispatch => {\n    fetch(\"http://localhost:5000/api/itineraries/\" + city).then(resp => {\n      return resp.json();\n    }).then(json => {\n      dispatch({\n        type: \"FETCH_ITINERARIES_SUCCESS\",\n        payload: json\n      });\n    }).catch(err => {\n      dispatch({\n        type: \"FETCH_ITINERARIES_ERROR\",\n        payload: err\n      });\n    });\n  };\n};\nexport const fetchItinerariesFavorite = emailAdded => {\n  return dispatch => {\n    axios.post(\"http://localhost:5000/api/itineraries/:name/favorites\", emailAdded).then(res => {\n      console.log(\"response\", res);\n\n      if (res.status === 200) {\n        // decode the token\n        const token = res.data.token;\n        localStorage.setItem(\"token\", token);\n        console.log(\"token\", token);\n        const decoded = jwt_decode(token); // decode your token here\n\n        console.log(\"decoded\", decoded);\n        console.log(\"res\", res); //send the user to his account page\n\n        dispatch({\n          type: \"ADD_ITINERARY_FAVORITE\",\n          payload: decoded,\n          // payload: token,\n          email: decoded.email //send the decoded token instead\n\n        });\n      } // window.location = \"/UserAccount \";\n\n    }).catch(error => {\n      console.log(\"error\" + error);\n\n      if (error.response) {\n        if (error.response.status === 409) {\n          alert(\"loggin error\");\n        } else {//alert with something else\n        }\n      }\n    }); //add the full url of your back end\n  };\n};","map":{"version":3,"sources":["D:/mernProject2/myTinerary/client/src/store/actions/itineraryActions.js"],"names":["axios","jwt_decode","fitchItinerariesAction","dispatch","fetch","then","resp","json","type","payload","catch","err","fetchItinerariesByCityName","city","fetchItinerariesFavorite","emailAdded","post","res","console","log","status","token","data","localStorage","setItem","decoded","email","error","response","alert"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAAqC;;AAErC,OAAO,MAAMC,sBAAsB,GAAG,MAAM;AAC1C,SAAQC,QAAD,IAAc;AACnB;AACAC,IAAAA,KAAK,CAAC,uCAAD,CAAL,CACGC,IADH,CACSC,IAAD,IAAU;AACd,aAAOA,IAAI,CAACC,IAAL,EAAP;AACD,KAHH,EAIGF,IAJH,CAISE,IAAD,IAAU;AACdJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,2BAAR;AAAqCC,QAAAA,OAAO,EAAEF;AAA9C,OAAD,CAAR;AACD,KANH,EAOGG,KAPH,CAOUC,GAAD,IAAS;AACdR,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,yBAAR;AAAmCC,QAAAA,OAAO,EAAEE;AAA5C,OAAD,CAAR;AACD,KATH;AAUD,GAZD;AAaD,CAdM;AAeP,OAAO,MAAMC,0BAA0B,GAAIC,IAAD,IAAU;AAClD,SAAQV,QAAD,IAAc;AACnBC,IAAAA,KAAK,CAAC,2CAA2CS,IAA5C,CAAL,CACGR,IADH,CACSC,IAAD,IAAU;AACd,aAAOA,IAAI,CAACC,IAAL,EAAP;AACD,KAHH,EAIGF,IAJH,CAISE,IAAD,IAAU;AACdJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,2BAAR;AAAqCC,QAAAA,OAAO,EAAEF;AAA9C,OAAD,CAAR;AACD,KANH,EAOGG,KAPH,CAOUC,GAAD,IAAS;AACdR,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,yBAAR;AAAmCC,QAAAA,OAAO,EAAEE;AAA5C,OAAD,CAAR;AACD,KATH;AAUD,GAXD;AAYD,CAbM;AAcP,OAAO,MAAMG,wBAAwB,GAAIC,UAAD,IAAgB;AACtD,SAAQZ,QAAD,IAAc;AACnBH,IAAAA,KAAK,CACFgB,IADH,CACQ,uDADR,EACiED,UADjE,EAEGV,IAFH,CAESY,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,GAAxB;;AACA,UAAIA,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACtB;AAEA,cAAMC,KAAK,GAAGJ,GAAG,CAACK,IAAJ,CAASD,KAAvB;AACAE,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,KAArB;AACA,cAAMI,OAAO,GAAGxB,UAAU,CAACoB,KAAD,CAA1B,CANsB,CAMa;;AAEnCH,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBM,OAAvB;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB,EATsB,CAUtB;;AACAd,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAE,wBADC;AAEPC,UAAAA,OAAO,EAAEgB,OAFF;AAGP;AACAC,UAAAA,KAAK,EAAED,OAAO,CAACC,KAJR,CAKP;;AALO,SAAD,CAAR;AAOD,OApBY,CAqBb;;AACD,KAxBH,EAyBGhB,KAzBH,CAyBUiB,KAAD,IAAW;AAChBT,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAUQ,KAAtB;;AACA,UAAIA,KAAK,CAACC,QAAV,EAAoB;AAClB,YAAID,KAAK,CAACC,QAAN,CAAeR,MAAf,KAA0B,GAA9B,EAAmC;AACjCS,UAAAA,KAAK,CAAC,cAAD,CAAL;AACD,SAFD,MAEO,CACL;AACD;AACF;AACF,KAlCH,EADmB,CAoCnB;AACD,GArCD;AAsCD,CAvCM","sourcesContent":["// I cleaned a bit your action, I was almost good, just a few probem with the .json() convertion and handeling the payload\n//it shuld work now ;)\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\"; // import dependency\n\nexport const fitchItinerariesAction = () => {\n  return (dispatch) => {\n    //add the full url of your back end\n    fetch(\"http://localhost:5000/api/itineraries\")\n      .then((resp) => {\n        return resp.json();\n      })\n      .then((json) => {\n        dispatch({ type: \"FETCH_ITINERARIES_SUCCESS\", payload: json });\n      })\n      .catch((err) => {\n        dispatch({ type: \"FETCH_ITINERARIES_ERROR\", payload: err });\n      });\n  };\n};\nexport const fetchItinerariesByCityName = (city) => {\n  return (dispatch) => {\n    fetch(\"http://localhost:5000/api/itineraries/\" + city)\n      .then((resp) => {\n        return resp.json();\n      })\n      .then((json) => {\n        dispatch({ type: \"FETCH_ITINERARIES_SUCCESS\", payload: json });\n      })\n      .catch((err) => {\n        dispatch({ type: \"FETCH_ITINERARIES_ERROR\", payload: err });\n      });\n  };\n};\nexport const fetchItinerariesFavorite = (emailAdded) => {\n  return (dispatch) => {\n    axios\n      .post(\"http://localhost:5000/api/itineraries/:name/favorites\", emailAdded)\n      .then((res) => {\n        console.log(\"response\", res);\n        if (res.status === 200) {\n          // decode the token\n\n          const token = res.data.token;\n          localStorage.setItem(\"token\", token);\n          console.log(\"token\", token);\n          const decoded = jwt_decode(token); // decode your token here\n\n          console.log(\"decoded\", decoded);\n          console.log(\"res\", res);\n          //send the user to his account page\n          dispatch({\n            type: \"ADD_ITINERARY_FAVORITE\",\n            payload: decoded,\n            // payload: token,\n            email: decoded.email,\n            //send the decoded token instead\n          });\n        }\n        // window.location = \"/UserAccount \";\n      })\n      .catch((error) => {\n        console.log(\"error\" + error);\n        if (error.response) {\n          if (error.response.status === 409) {\n            alert(\"loggin error\");\n          } else {\n            //alert with something else\n          }\n        }\n      });\n    //add the full url of your back end\n  };\n};\n"]},"metadata":{},"sourceType":"module"}