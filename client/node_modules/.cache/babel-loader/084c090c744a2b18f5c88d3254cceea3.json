{"ast":null,"code":"var _jsxFileName = \"D:\\\\mernProject2\\\\myTinerary\\\\client\\\\src\\\\Component\\\\Cities.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Spinner } from \"react-bootstrap\";\nimport { fetchCitiesAction } from \"../store/actions/cityActions\";\nimport { Link } from \"react-router-dom\";\n\nclass Cities extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      console.log(\"event from handel change\", e.target.value);\n      this.setState({\n        search: e.target.value\n      });\n    };\n\n    this.state = {\n      cities: [],\n      search: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchCitiesAction();\n  }\n\n  cutArray() {\n    return this.props.cities.map((city, index) => {\n      return index < 15;\n    });\n  }\n\n  filter() {\n    if (this.props.cities) {\n      const filterCity = this.props.cities.filter((city, index) => {\n        console.log(\" our cities  \" + city.name);\n        console.log(\"our search \" + this.state.search);\n        let cityName = city.name.toLowerCase();\n        return cityName.startsWith(this.state.search.toLowerCase());\n      });\n      return filterCity;\n    } else return [];\n  }\n\n  render() {\n    const filterList = this.filter();\n    const {\n      cities\n    } = this.props;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"justify-content-around\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"filter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Search for City: \"), React.createElement(\"input\", {\n      className: \"btn btn-outline-info mr-2\",\n      type: \"search\",\n      id: \"filter\",\n      value: this.state.search,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Link, {\n      to: \"/AddCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-outline-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Add city you like\"))), !filterList && React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Loading...\")), filterList && filterList.map((city, index) => React.createElement(Link, {\n      to: \"itineraries/\" + city.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      key: index,\n      city: city,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card border-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, city.name), React.createElement(\"img\", {\n      className: \"card-img \",\n      src: city.picture,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    cities: state.cities.cities\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCitiesAction: city => dispatch(fetchCitiesAction(city))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);","map":{"version":3,"sources":["D:/mernProject2/myTinerary/client/src/Component/Cities.js"],"names":["React","Component","connect","Spinner","fetchCitiesAction","Link","Cities","constructor","handleChange","e","console","log","target","value","setState","search","state","cities","componentDidMount","props","cutArray","map","city","index","filter","filterCity","name","cityName","toLowerCase","startsWith","render","filterList","picture","mapStateToProps","ownProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Spinner } from \"react-bootstrap\";\nimport { fetchCitiesAction } from \"../store/actions/cityActions\";\nimport { Link } from \"react-router-dom\";\nclass Cities extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cities: [],\n      search: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchCitiesAction();\n  }\n  cutArray() {\n    return this.props.cities.map((city, index) => {\n      return index < 15;\n    });\n  }\n  handleChange = (e) => {\n    console.log(\"event from handel change\", e.target.value);\n    this.setState({\n      search: e.target.value,\n    });\n  };\n  filter() {\n    if (this.props.cities) {\n      const filterCity = this.props.cities.filter((city, index) => {\n        console.log(\" our cities  \" + city.name);\n        console.log(\"our search \" + this.state.search);\n        let cityName = city.name.toLowerCase();\n        return cityName.startsWith(this.state.search.toLowerCase());\n      });\n      return filterCity;\n    } else return [];\n  }\n\n  render() {\n    const filterList = this.filter();\n    const { cities } = this.props;\n    return (\n      <div>\n        <div className=\"justify-content-around\">\n          <label htmlFor=\"filter\">Search for City: </label>\n          <input\n            className=\"btn btn-outline-info mr-2\"\n            type=\"search\"\n            id=\"filter\"\n            value={this.state.search}\n            onChange={this.handleChange}\n          />\n          <Link to=\"/AddCity\">\n            <button className=\"btn btn-outline-info\">Add city you like</button>\n          </Link>\n        </div>\n        {!filterList && (\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        )}\n\n        {filterList &&\n          filterList.map((city, index) => (\n            <Link to={\"itineraries/\" + city.name}>\n              <div key={index} city={city}>\n                <div className=\"card border-info\">\n                  <h3 className=\"card-title\">{city.name}</h3>\n                  <img className=\"card-img \" src={city.picture} alt=\"\" />\n                </div>\n              </div>\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    cities: state.cities.cities,\n  };\n};\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCitiesAction: (city) => dispatch(fetchCitiesAction(city)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);\n"]},"metadata":{},"sourceType":"module"}