{"ast":null,"code":"// I cleaned a bit your action, It was almost good, just a few probem with the .json() convertion and handeling the payload\n//it shuld work now ;)\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\"; // import dependency\n// const jwtDecode = require(\"jwt-decode\");\n\nexport const fetchUsersAction = () => {\n  return dispatch => {\n    //add the full url of your back end\n    fetch(\"http://localhost:5000/api/users/all\").then(resp => {\n      return resp.json();\n    }).then(json => {\n      dispatch({\n        type: \"FETCH_USERS_SUCCESS\",\n        payload: json\n      });\n    }).catch(err => {\n      dispatch({\n        type: \"FETCH_USERS_ERROR\",\n        payload: err\n      });\n    });\n  };\n};\nexport const register = newUser => {\n  return dispatch => {\n    axios.post(\"http://localhost:5000/api/users/register\", newUser).then(res => {\n      console.log(\"response\", res);\n\n      if (res.status === 200) {\n        //send the user to his account page\n        const token = res.data.token;\n        localStorage.setItem(\"token\", token);\n        console.log(\"token\", token);\n        const decoded = jwt_decode(token); // decode your token here\n\n        console.log(\"decoded\", decoded);\n        dispatch({\n          type: \"REGISTER_SUCCESS\",\n          payload: decoded,\n          token: token\n        });\n        window.location = \"/UserAccount\";\n      }\n    }).catch(error => {\n      console.log(\"error\" + error.response);\n\n      if (error.response) {\n        if (error.response.status === 409) {\n          alert(\"Register error\");\n        } else {\n          //alert with something else\n          alert(\"Be Sure From Your Register\");\n        }\n      }\n    }); //add the full url of your back end\n  };\n};\nexport const login = userData => {\n  return dispatch => {\n    axios.post(\"http://localhost:5000/api/users/login\", userData).then(res => {\n      console.log(\"response\", res);\n\n      if (res.status === 200) {\n        // decode the token\n        const token = res.data.token;\n        localStorage.setItem(\"token\", token);\n        console.log(\"token\", token);\n        const decoded = jwt_decode(token); // decode your token here\n\n        console.log(\"decoded\", decoded);\n        console.log(\"res\", res); //send the user to his account page\n\n        dispatch({\n          type: \"LOGIN_SUCCESS\",\n          payload: decoded,\n          token: token //  payload: token,\n          //   user: decoded.name,\n          //send the decoded token instead\n\n        });\n      } // window.location = \"/UserAccount \";\n\n    }).catch(error => {\n      console.log(\"error\" + error);\n\n      if (error.response) {\n        if (error.response.status === 409) {\n          alert(\"loggin error\");\n        } else {//alert with something else\n        }\n      }\n    }); //add the full url of your back end\n  };\n}; ///////////////////add comments to the user\n\nexport const addComments = (comments, name, email) => {\n  console.log(\"name\", name);\n  return dispatch => {\n    axios.post(`http://localhost:5000/api/users/${name}/comments`, {\n      comments: comments,\n      email\n    }).then(res => {\n      console.log(\"response\", res);\n\n      if (res.status === 200) {\n        //send the user to his account page\n        dispatch({\n          type: \"ADD_COMMENTS\",\n          payload: res.payload\n        });\n        dispatch(fetchItinerariesByCityName(name));\n      }\n    }).catch(error => {\n      console.log(\"error\" + error.response);\n\n      if (error.response) {\n        if (error.response.status === 409) {\n          alert(\"problem with email\");\n        } else {\n          //alert with something else\n          alert(\"Be Sure From Your email and link\");\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/mernProject2/myTinerary/client/src/store/actions/usersAction.js"],"names":["axios","jwt_decode","fetchUsersAction","dispatch","fetch","then","resp","json","type","payload","catch","err","register","newUser","post","res","console","log","status","token","data","localStorage","setItem","decoded","window","location","error","response","alert","login","userData","addComments","comments","name","email","fetchItinerariesByCityName"],"mappings":"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","sourcesContent":["// I cleaned a bit your action, It was almost good, just a few probem with the .json() convertion and handeling the payload\n//it shuld work now ;)\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\"; // import dependency\n\n// const jwtDecode = require(\"jwt-decode\");\nexport const fetchUsersAction = () => {\n  return (dispatch) => {\n    //add the full url of your back end\n    fetch(\"http://localhost:5000/api/users/all\")\n      .then((resp) => {\n        return resp.json();\n      })\n      .then((json) => {\n        dispatch({ type: \"FETCH_USERS_SUCCESS\", payload: json });\n      })\n      .catch((err) => {\n        dispatch({ type: \"FETCH_USERS_ERROR\", payload: err });\n      });\n  };\n};\n\nexport const register = (newUser) => {\n  return (dispatch) => {\n    axios\n      .post(\"http://localhost:5000/api/users/register\", newUser)\n      .then((res) => {\n        console.log(\"response\", res);\n        if (res.status === 200) {\n          //send the user to his account page\n          const token = res.data.token;\n          localStorage.setItem(\"token\", token);\n          console.log(\"token\", token);\n          const decoded = jwt_decode(token); // decode your token here\n\n          console.log(\"decoded\", decoded);\n\n          dispatch({\n            type: \"REGISTER_SUCCESS\",\n            payload: decoded,\n            token: token,\n          });\n          window.location = \"/UserAccount\";\n        }\n      })\n      .catch((error) => {\n        console.log(\"error\" + error.response);\n        if (error.response) {\n          if (error.response.status === 409) {\n            alert(\"Register error\");\n          } else {\n            //alert with something else\n            alert(\"Be Sure From Your Register\");\n          }\n        }\n      });\n    //add the full url of your back end\n  };\n};\n\nexport const login = (userData) => {\n  return (dispatch) => {\n    axios\n      .post(\"http://localhost:5000/api/users/login\", userData)\n      .then((res) => {\n        console.log(\"response\", res);\n        if (res.status === 200) {\n          // decode the token\n\n          const token = res.data.token;\n          localStorage.setItem(\"token\", token);\n          console.log(\"token\", token);\n          const decoded = jwt_decode(token); // decode your token here\n\n          console.log(\"decoded\", decoded);\n          console.log(\"res\", res);\n          //send the user to his account page\n          dispatch({\n            type: \"LOGIN_SUCCESS\",\n            payload: decoded,\n            token: token,\n            //  payload: token,\n            //   user: decoded.name,\n            //send the decoded token instead\n          });\n        }\n        // window.location = \"/UserAccount \";\n      })\n      .catch((error) => {\n        console.log(\"error\" + error);\n        if (error.response) {\n          if (error.response.status === 409) {\n            alert(\"loggin error\");\n          } else {\n            //alert with something else\n          }\n        }\n      });\n    //add the full url of your back end\n  };\n};\n\n///////////////////add comments to the user\nexport const addComments = (comments, name, email) => {\n  console.log(\"name\", name);\n  return (dispatch) => {\n    axios\n      .post(`http://localhost:5000/api/users/${name}/comments`, {\n        comments: comments,\n        email,\n      })\n      .then((res) => {\n        console.log(\"response\", res);\n        if (res.status === 200) {\n          //send the user to his account page\n          dispatch({ type: \"ADD_COMMENTS\", payload: res.payload });\n          dispatch(fetchItinerariesByCityName(name));\n        }\n      })\n      .catch((error) => {\n        console.log(\"error\" + error.response);\n        if (error.response) {\n          if (error.response.status === 409) {\n            alert(\"problem with email\");\n          } else {\n            //alert with something else\n            alert(\"Be Sure From Your email and link\");\n          }\n        }\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}